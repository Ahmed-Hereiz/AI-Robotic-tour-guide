from customAgents.agent_prompt import BasePrompt
from typing import Union
from PIL import Image

class ReActPrompt(BasePrompt):
    def __init__(self, 
                 text: str = "", 
                 image: Union[str, Image.Image, None] = None):

        super().__init__(text, image)


    def construct_prompt(self, query: str, example_workflow: str = ""):
        self.prompt = """
{text}
You are an AI agent designed to answer questions through an iterative process. You have access to the following tools:
{tools_and_role}

IMPORTANT: You will determine whether you need to use a tool or answer the question based on your current knowledge. You will go through multiple steps before reaching a final answer if needed.

Follow this format EXACTLY for each step:

1. Decide whether to use a tool or answer directly:
Thought: [Your reasoning on whether you need to use tools or can answer based on current knowledge]
Action: [One of: "finish" OR one of {tool_names}]
Action Input: [Python list of inputs for the chosen action, if there is action choosen]

2. If you choose to use a tool:
- Do not generate "Observation" text. Observations will be provided to you after each action.
- Start a new iteration with a new Thought after receiving each observation.
- Use ONLY information from observations. Do not use external knowledge or assumptions.
- Keep gathering information until you are CERTAIN you have everything you need.

3. When you are CERTAIN you can answer the question:
Thought: I now have all the information to answer the question
Action: finish
Final Answer: [Your detailed answer, referencing specific observations or past memory if applicable]

CRITICAL RULES:
1. You operate in a loop. Each iteration, you provide ONLY Thought, Action, and Action Input.
2. DO NOT generate "Observation" text. Observations will be provided to you after each action (DON'T EVER GENERATE OBSERVATION, JUST USE IT).
3. After each observation, start a new iteration with a new Thought.
4. Use ONLY information from observations. Do not use external knowledge or assumptions.
5. You may need multiple iterations to gather enough information. Be patient and thorough.
6. Do NOT try to provide a final answer until you are absolutely certain you have all necessary information.
7. You should have good reasoning ability while thinking, so if there is an indirect question, you can use math to solve for it.
8. If an image is provided, handle it directly.
9. If an audio file is provided, handle it directly.

When you are CERTAIN you have ALL information needed to answer the original question:
Thought: I now have all the information to answer the question
Action: finish
Final Answer: [Your detailed answer, referencing specific observations]

Remember:
- You CANNOT provide a final answer without using the "finish" action.
- Always wait for an observation after each action before starting a new iteration.
- If an observation is unclear or insufficient, use your next action to clarify or gather more information.
- Your goal is to be thorough and accurate, not quick. Take as many iterations as needed and use tools as much time as you need to get the best result.

Example workflow:
{example_workflow}

Let's begin!

Question: {query}
"""

        self.replace_placeholder("{example_workflow}", example_workflow)
        self.replace_placeholder("{text}", self.text)
        self.replace_placeholder("{query}", query)

        if self.image:
            self.prepend_to_prompt("An image is provided with this prompt. Consider using visual analysis tools if they might be relevant to the task.")

        return self.prompt

    def set_tools(self, tools: str, tool_names: str):
        """
        Set the available tools after initialization.
        
        :param tools: A string containing the list of available tools and their roles.
        :param tool_names: A string containing the names of the tools.
        """
        self.prompt = self.prompt.replace("{tools_and_role}", tools)
        self.prompt = self.prompt.replace("{tool_names}", tool_names)

# React prompt example : 

# """
# Question: What is the date today ?

# [you in iteration 1]
# Thought: I have to search for the day today using the internet to get a good resault.
# Action: search tool
# Action Input: today's date

# [you then STOP the first iteration after this]


# ... (not generated by AI it comes as from a software code) Observation: [the tool will return the today's date to you so you have to read the observation carefully to answer in the next step using it (you don't generate observation it just comes to you)]

# [you in iteration 2]
# Thought: from the previous Observation I can find good and specific information that can answer the user original question which is "What is the date today ?"
# Action: finish
# Final Answer: Today's date is... [if there is more to describe to make chat more user friendly do it]

# """